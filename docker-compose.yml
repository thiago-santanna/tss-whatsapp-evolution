version: "3.9"
networks:
  proxy:
    name: proxy
    driver: bridge
  app_net:
    name: app_net
    driver: bridge
volumes:
  traefik_letsencrypt:
  traefik_dynamic:
  n8n_data:
  evolution_data:
  postgres_data:
services:
  # -------------------------------
  # PostgreSQL Database
  # -------------------------------
  postgres:
    image: postgres:15-alpine
    platform: linux/arm64
    restart:
    environment:
      - TZ=${TZ}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 5s
      retries: 5
    labels:
      - traefik.enable=false
    networks:
      - app_net
  # # -------------------------------
  # # Reverse proxy + TLS automático
  # # -------------------------------
  # traefik:
  #   image: traefik:v3.1
  #   platform: linux/arm64
  #   restart: always
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   command:
  #     - --providers.docker=true
  #     - --providers.docker.exposedbydefault=false
  #     - --entrypoints.web.address=${TRAEFIK_ENTRYPOINT_WEB}
  #     - --entrypoints.websecure.address=${TRAEFIK_ENTRYPOINT_WEBSECURE}
  #     - --certificatesresolvers.le.acme.tlschallenge=true
  #     - --certificatesresolvers.le.acme.email=${TRAEFIK_ACME_EMAIL}
  #     - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
  #     # (opcional) dashboard interno: http://traefik:8080
  #     - --api.dashboard=true
  #     - --api.insecure=true
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #     # - "8080:8080" # habilite só p/ debug e mantenha fechado no Security Group
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - traefik_letsencrypt:/letsencrypt
  #     - traefik_dynamic:/dynamic
  #   environment:
  #     - TZ=${TZ}
  #   networks:
  #     - proxy
  # # -------------------------------
  # # n8n (exposto via Traefik)
  # # -------------------------------
  # n8n:
  #   image: n8nio/n8n:latest
  #   platform: linux/arm64
  #   restart: always
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     evolution:
  #       condition: service_started
  #   environment:
  #     - TZ=${TZ}
  #     - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}
  #     - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
  #     - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
  #     - N8N_HOST=${N8N_HOST}
  #     - N8N_PROTOCOL=${N8N_PROTOCOL}
  #     - N8N_PORT=5678
  #     - WEBHOOK_URL=https://${N8N_DOMAIN}/
  #     - N8N_DIAGNOSTICS_ENABLED=false
  #     - N8N_PERSONALIZATION_ENABLED=false
  #     # Configurações do PostgreSQL para n8n
  #     - DB_TYPE=postgresdb
  #     - DB_POSTGRESDB_HOST=postgres
  #     - DB_POSTGRESDB_PORT=5432
  #     - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
  #     - DB_POSTGRESDB_USER=${POSTGRES_USER}
  #     - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
  #     - DB_POSTGRESDB_SCHEMA=${N8N_DB_SCHEMA:-public}
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget -qO- http://localhost:5678/healthz || exit 1"]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 5
  #   volumes:
  #     - n8n_data:/home/node/.n8n
  #   expose:
  #     - "5678"
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.n8n.rule=Host(`${N8N_DOMAIN}`)
  #     - traefik.http.routers.n8n.entrypoints=websecure
  #     - traefik.http.routers.n8n.tls.certresolver=le
  #     - traefik.http.services.n8n.loadbalancer.server.port=5678
  #     # Redirect http->https
  #     - traefik.http.routers.n8n-redirect.rule=Host(`${N8N_DOMAIN}`)
  #     - traefik.http.routers.n8n-redirect.entrypoints=web
  #     - traefik.http.routers.n8n-redirect.middlewares=redirect-to-https
  #     - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
  #   networks:
  #     - proxy
  #     - app_net
  # # -------------------------------
  # # Evolution API (PRIVADA, só rede interna)
  # # -------------------------------
  # evolution:
  #   image: atendai/evolution-api:latest
  #   platform: linux/arm64
  #   restart: always
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   environment:
  #     - TZ=${TZ}
  #     - API_KEY=${EVOLUTION_API_KEY}
  #     - LICENSE_KEY=${EVOLUTION_LICENSE_KEY}
  #     - NODE_ENV=${EVOLUTION_NODE_ENV}
  #     # Configurações do PostgreSQL para Evolution API (se suportar)
  #     - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  #     # Adicione variáveis específicas da sua licença/config aqui se necessário
  #     # - BASE_WEBHOOK_URL=https://${N8N_DOMAIN}/webhook/evolution
  #   volumes:
  #     - evolution_data:/app/data
  #   expose:
  #     - "8080" # n8n acessa via http://evolution:8080
  #   healthcheck:
  #     test: ["CMD-SHELL", "wget -qO- http://localhost:8080/health || exit 1"]
  #     interval: 30s
  #     timeout: 5s
  #     retries: 5
  #   labels:
  #     - traefik.enable=false
  #   networks:
  #     - app_net
